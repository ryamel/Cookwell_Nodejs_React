{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Documents/cookwell-react-express/client/src/components/dropMenu.jsx\",\n    _s = $RefreshSig$();\n\n// how to use. Because of the format you need to be using class component to use DropMenu\n// name props is the same of the name attribute for any input field\n// options is an array of selections that will appear in the menu\n// handleinput should be a function which passes to your input handler (assuming you are using controlled components/fields)\n// state should be the state\n//<DropMenu \n// \tname='cuisine'\n// \toptions={cuisine} \n// \thandleInput = {(e) => this.handleInput(e.target.name, e.target.value)}\n// \tstate={this.state.cuisine}\n// />\nimport React, { useState, useEffect, useRef } from \"react\";\nimport './dropMenu.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DropMenu(props) {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  let menuRef = useRef();\n  let menuBtnRef = useRef();\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", event => {\n      if (menuRef.current && !(menuRef.current.contains(event.target) || menuBtnRef.current.contains(event.target))) {\n        setIsOpen(false);\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: menuBtnRef,\n      className: \"selectButton\",\n      onClick: () => setIsOpen(isOpen => !isOpen),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"selectOptions\",\n        children: \"Select Options\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arrow-down\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), isOpen && renderMenuOptions(props.options, menuRef, props.handleInput, props.name, props.state)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, this);\n}\n\n_s(DropMenu, \"T4WdP10dej/GlQkEKbhkM95HaOU=\");\n\n_c = DropMenu;\n\nfunction renderMenuOptions(optionNames, menuRef, handleInput, name, state) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: menuRef,\n    className: \"dropMenu\",\n    children: optionNames.map((optionName, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"check-container\",\n      children: [optionName, /*#__PURE__*/_jsxDEV(\"input\", {\n        name: name,\n        checked: state.includes(optionName),\n        type: \"checkbox\",\n        value: optionName,\n        onChange: event => handleInput(event) // the event object needs to be passed this way if a child component is calling a parent function\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"checkmark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 6\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 3\n  }, this);\n}\n\nexport default DropMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropMenu\");","map":{"version":3,"sources":["/Users/ryan/Documents/cookwell-react-express/client/src/components/dropMenu.jsx"],"names":["React","useState","useEffect","useRef","DropMenu","props","isOpen","setIsOpen","menuRef","menuBtnRef","document","addEventListener","event","current","contains","target","renderMenuOptions","options","handleInput","name","state","optionNames","map","optionName","index","includes"],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,iBAAP;;;AAIA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAExB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAApC;AAEA,MAAIO,OAAO,GAAGL,MAAM,EAApB;AACA,MAAIM,UAAU,GAAGN,MAAM,EAAvB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACfQ,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAwCC,KAAD,IAAW;AACjD,UAAIJ,OAAO,CAACK,OAAR,IAAmB,EAAEL,OAAO,CAACK,OAAR,CAAgBC,QAAhB,CAAyBF,KAAK,CAACG,MAA/B,KAA0CN,UAAU,CAACI,OAAX,CAAmBC,QAAnB,CAA4BF,KAAK,CAACG,MAAlC,CAA5C,CAAvB,EAAgH;AAC/GR,QAAAA,SAAS,CAAC,KAAD,CAAT;AACA;AACD,KAJD;AAKA,GANQ,CAAT;AAQA,sBACC,QAAC,KAAD,CAAO,QAAP;AAAA,4BAEI;AAAK,MAAA,GAAG,EAAEE,UAAV;AAAsB,MAAA,SAAS,EAAC,cAAhC;AAA+C,MAAA,OAAO,EAAE,MAAMF,SAAS,CAAED,MAAD,IAAY,CAACA,MAAd,CAAvE;AAAA,8BACC;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAQKA,MAAM,IAAIU,iBAAiB,CAACX,KAAK,CAACY,OAAP,EAAgBT,OAAhB,EAAyBH,KAAK,CAACa,WAA/B,EAA4Cb,KAAK,CAACc,IAAlD,EAAwDd,KAAK,CAACe,KAA9D,CARhC;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAcA;;GA7BQhB,Q;;KAAAA,Q;;AAmCT,SAASY,iBAAT,CAA2BK,WAA3B,EAAwCb,OAAxC,EAAiDU,WAAjD,EAA8DC,IAA9D,EAAoEC,KAApE,EAA2E;AAE1E,sBACC;AAAK,IAAA,GAAG,EAAEZ,OAAV;AAAmB,IAAA,SAAS,EAAC,UAA7B;AAAA,cAECa,WAAW,CAACC,GAAZ,CAAgB,CAACC,UAAD,EAAaC,KAAb,kBACf;AAAmB,MAAA,SAAS,EAAC,iBAA7B;AAAA,iBACED,UADF,eAEC;AACC,QAAA,IAAI,EAAEJ,IADP;AAEC,QAAA,OAAO,EAAEC,KAAK,CAACK,QAAN,CAAeF,UAAf,CAFV;AAGC,QAAA,IAAI,EAAC,UAHN;AAIC,QAAA,KAAK,EAAEA,UAJR;AAKC,QAAA,QAAQ,EAAGX,KAAD,IAAWM,WAAW,CAACN,KAAD,CALjC,CAK0C;;AAL1C;AAAA;AAAA;AAAA;AAAA,cAFD,eASC;AAAM,QAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,cATD;AAAA,OAAYY,KAAZ;AAAA;AAAA;AAAA;AAAA,YADD;AAFD;AAAA;AAAA;AAAA;AAAA,UADD;AAmBA;;AAID,eAAepB,QAAf","sourcesContent":["\n// how to use. Because of the format you need to be using class component to use DropMenu\n// name props is the same of the name attribute for any input field\n// options is an array of selections that will appear in the menu\n// handleinput should be a function which passes to your input handler (assuming you are using controlled components/fields)\n// state should be the state\n\n\n//<DropMenu \n// \tname='cuisine'\n// \toptions={cuisine} \n// \thandleInput = {(e) => this.handleInput(e.target.name, e.target.value)}\n// \tstate={this.state.cuisine}\n// />\n\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport './dropMenu.sass';\n\n\n\nfunction DropMenu(props) {\n\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tlet menuRef = useRef();\n\tlet menuBtnRef = useRef();\n\n\tuseEffect(() => {\n\t\tdocument.addEventListener(\"mousedown\", (event) => {\n\t\t\tif (menuRef.current && !(menuRef.current.contains(event.target) || menuBtnRef.current.contains(event.target)) ) {\n\t\t\t\tsetIsOpen(false); \n\t\t\t}\n\t\t});\n\t})\n\n\treturn (\n\t\t<React.Fragment>\n\n    \t\t<div ref={menuBtnRef} className='selectButton' onClick={() => setIsOpen((isOpen) => !isOpen)}  >\n    \t\t\t<span className='selectOptions' >Select Options</span>\n    \t\t\t<div className='arrow-down'></div>\n    \t\t</div> \n\n\t\t    { \n\t\t    \tisOpen && renderMenuOptions(props.options, menuRef, props.handleInput, props.name, props.state) \n\t\t    }\n\n\t    </React.Fragment>\n\t)\n}\n\n\n\n\n\nfunction renderMenuOptions(optionNames, menuRef, handleInput, name, state) {\n\n\treturn(\n\t\t<div ref={menuRef} className='dropMenu' >\n\t\t{\n\t\t\toptionNames.map((optionName, index) => \n\t\t\t\t<label key={index} className=\"check-container\"> \n\t\t\t\t\t{optionName}\n\t\t\t\t\t<input \n\t\t\t\t\t\tname={name} \n\t\t\t\t\t\tchecked={state.includes(optionName)}\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tvalue={optionName}\n\t\t\t\t\t\tonChange={(event) => handleInput(event)} // the event object needs to be passed this way if a child component is calling a parent function\n\t\t\t\t\t/>\n\t\t\t\t\t<span className=\"checkmark\"></span>\n\t\t\t\t</label> \n\t\t\t)\n\t\t}\n\t\t</div>\n\t)\n}\n\n\n\nexport default DropMenu;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}