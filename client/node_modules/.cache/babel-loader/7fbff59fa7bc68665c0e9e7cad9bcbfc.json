{"ast":null,"code":"import _slicedToArray from\"/Users/ryan/Documents/cookwell-react-express/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// how to use. Because of the format you need to be using class component to use DropMenu\n// name props is the same of the name attribute for any input field\n// options is an array of selections that will appear in the menu\n// handleinput should be a function which passes to your input handler (assuming you are using controlled components/fields)\n// state should be the state\n//<DropMenu \n// \tname='cuisine'\n// \toptions={cuisine} \n// \thandleInput = {(e) => this.handleInput(e.target.name, e.target.value)}\n// \tstate={this.state.cuisine}\n// />\nimport React,{useState,useEffect,useRef}from\"react\";import'./dropMenu.sass';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function DropMenu(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOpen=_useState2[0],setIsOpen=_useState2[1];var menuRef=useRef();var menuBtnRef=useRef();useEffect(function(){document.addEventListener(\"mousedown\",function(event){if(menuRef.current&&!(menuRef.current.contains(event.target)||menuBtnRef.current.contains(event.target))){setIsOpen(false);}});});return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{ref:menuBtnRef,className:\"selectButton\",onClick:function onClick(){return setIsOpen(function(isOpen){return!isOpen;});},children:[/*#__PURE__*/_jsx(\"span\",{className:\"selectOptions\",children:\"Select Options\"}),/*#__PURE__*/_jsx(\"div\",{className:\"arrow-down\"})]}),isOpen&&renderMenuOptions(props.options,menuRef,props.handleInput,props.name,props.state)]});}function renderMenuOptions(optionNames,menuRef,handleInput,name,state){return/*#__PURE__*/_jsx(\"div\",{ref:menuRef,className:\"dropMenu\",children:optionNames.map(function(optionName,index){return/*#__PURE__*/_jsxs(\"label\",{className:\"check-container\",children:[optionName,/*#__PURE__*/_jsx(\"input\",{name:name,checked:state.includes(optionName),type:\"checkbox\",value:optionName,onChange:function onChange(event){return handleInput(event);}// the event object needs to be passed this way if a child component is calling a parent function\n}),/*#__PURE__*/_jsx(\"span\",{className:\"checkmark\"})]},index);})});}export default DropMenu;","map":{"version":3,"sources":["/Users/ryan/Documents/cookwell-react-express/client/src/components/dropMenu.jsx"],"names":["React","useState","useEffect","useRef","DropMenu","props","isOpen","setIsOpen","menuRef","menuBtnRef","document","addEventListener","event","current","contains","target","renderMenuOptions","options","handleInput","name","state","optionNames","map","optionName","index","includes"],"mappings":"0KACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,MAArC,KAAmD,OAAnD,CACA,MAAO,iBAAP,C,wFAIA,QAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CAExB,cAA4BJ,QAAQ,CAAC,KAAD,CAApC,wCAAOK,MAAP,eAAeC,SAAf,eAEA,GAAIC,CAAAA,OAAO,CAAGL,MAAM,EAApB,CACA,GAAIM,CAAAA,UAAU,CAAGN,MAAM,EAAvB,CAEAD,SAAS,CAAC,UAAM,CACfQ,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,CAAuC,SAACC,KAAD,CAAW,CACjD,GAAIJ,OAAO,CAACK,OAAR,EAAmB,EAAEL,OAAO,CAACK,OAAR,CAAgBC,QAAhB,CAAyBF,KAAK,CAACG,MAA/B,GAA0CN,UAAU,CAACI,OAAX,CAAmBC,QAAnB,CAA4BF,KAAK,CAACG,MAAlC,CAA5C,CAAvB,CAAgH,CAC/GR,SAAS,CAAC,KAAD,CAAT,CACA,CACD,CAJD,EAKA,CANQ,CAAT,CAQA,mBACC,MAAC,KAAD,CAAO,QAAP,yBAEI,aAAK,GAAG,CAAEE,UAAV,CAAsB,SAAS,CAAC,cAAhC,CAA+C,OAAO,CAAE,yBAAMF,CAAAA,SAAS,CAAC,SAACD,MAAD,QAAY,CAACA,MAAb,EAAD,CAAf,EAAxD,wBACC,aAAM,SAAS,CAAC,eAAhB,4BADD,cAEC,YAAK,SAAS,CAAC,YAAf,EAFD,GAFJ,CAQKA,MAAM,EAAIU,iBAAiB,CAACX,KAAK,CAACY,OAAP,CAAgBT,OAAhB,CAAyBH,KAAK,CAACa,WAA/B,CAA4Cb,KAAK,CAACc,IAAlD,CAAwDd,KAAK,CAACe,KAA9D,CARhC,GADD,CAcA,CAMD,QAASJ,CAAAA,iBAAT,CAA2BK,WAA3B,CAAwCb,OAAxC,CAAiDU,WAAjD,CAA8DC,IAA9D,CAAoEC,KAApE,CAA2E,CAE1E,mBACC,YAAK,GAAG,CAAEZ,OAAV,CAAmB,SAAS,CAAC,UAA7B,UAECa,WAAW,CAACC,GAAZ,CAAgB,SAACC,UAAD,CAAaC,KAAb,qBACf,eAAmB,SAAS,CAAC,iBAA7B,WACED,UADF,cAEC,cACC,IAAI,CAAEJ,IADP,CAEC,OAAO,CAAEC,KAAK,CAACK,QAAN,CAAeF,UAAf,CAFV,CAGC,IAAI,CAAC,UAHN,CAIC,KAAK,CAAEA,UAJR,CAKC,QAAQ,CAAE,kBAACX,KAAD,QAAWM,CAAAA,WAAW,CAACN,KAAD,CAAtB,EAA+B;AAL1C,EAFD,cASC,aAAM,SAAS,CAAC,WAAhB,EATD,GAAYY,KAAZ,CADe,EAAhB,CAFD,EADD,CAmBA,CAID,cAAepB,CAAAA,QAAf","sourcesContent":["\n// how to use. Because of the format you need to be using class component to use DropMenu\n// name props is the same of the name attribute for any input field\n// options is an array of selections that will appear in the menu\n// handleinput should be a function which passes to your input handler (assuming you are using controlled components/fields)\n// state should be the state\n\n\n//<DropMenu \n// \tname='cuisine'\n// \toptions={cuisine} \n// \thandleInput = {(e) => this.handleInput(e.target.name, e.target.value)}\n// \tstate={this.state.cuisine}\n// />\n\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport './dropMenu.sass';\n\n\n\nfunction DropMenu(props) {\n\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tlet menuRef = useRef();\n\tlet menuBtnRef = useRef();\n\n\tuseEffect(() => {\n\t\tdocument.addEventListener(\"mousedown\", (event) => {\n\t\t\tif (menuRef.current && !(menuRef.current.contains(event.target) || menuBtnRef.current.contains(event.target)) ) {\n\t\t\t\tsetIsOpen(false); \n\t\t\t}\n\t\t});\n\t})\n\n\treturn (\n\t\t<React.Fragment>\n\n    \t\t<div ref={menuBtnRef} className='selectButton' onClick={() => setIsOpen((isOpen) => !isOpen)}  >\n    \t\t\t<span className='selectOptions' >Select Options</span>\n    \t\t\t<div className='arrow-down'></div>\n    \t\t</div> \n\n\t\t    { \n\t\t    \tisOpen && renderMenuOptions(props.options, menuRef, props.handleInput, props.name, props.state) \n\t\t    }\n\n\t    </React.Fragment>\n\t)\n}\n\n\n\n\n\nfunction renderMenuOptions(optionNames, menuRef, handleInput, name, state) {\n\n\treturn(\n\t\t<div ref={menuRef} className='dropMenu' >\n\t\t{\n\t\t\toptionNames.map((optionName, index) => \n\t\t\t\t<label key={index} className=\"check-container\"> \n\t\t\t\t\t{optionName}\n\t\t\t\t\t<input \n\t\t\t\t\t\tname={name} \n\t\t\t\t\t\tchecked={state.includes(optionName)}\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tvalue={optionName}\n\t\t\t\t\t\tonChange={(event) => handleInput(event)} // the event object needs to be passed this way if a child component is calling a parent function\n\t\t\t\t\t/>\n\t\t\t\t\t<span className=\"checkmark\"></span>\n\t\t\t\t</label> \n\t\t\t)\n\t\t}\n\t\t</div>\n\t)\n}\n\n\n\nexport default DropMenu;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}