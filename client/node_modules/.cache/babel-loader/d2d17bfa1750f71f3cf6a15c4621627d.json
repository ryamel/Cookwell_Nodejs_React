{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Documents/cookwell-react-express/client/src/pages/reset-password.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport './reset-password.sass';\nimport axios from 'axios'; // load url params\n// send params to route api\n// confirm valid on client\n// \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ResetPassword extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      uid: '',\n      token: '',\n      msg: ''\n    };\n    this.updatePwd = this.updatePwd.bind(this);\n    this.handleMsg = this.handleMsg.bind(this);\n    this.getParameterByName = this.getParameterByName.bind(this);\n  }\n\n  componentDidMount() {\n    let uid = this.getParameterByName('uid');\n    let token = this.getParameterByName('token');\n    if (uid && token) this.setState({\n      uid: uid,\n      token: token\n    });\n  }\n\n  getParameterByName(name, url = window.location.href) {\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n  }\n\n  handleMsg(msg) {\n    if (msg.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logMsg\",\n        children: msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this);\n    }\n  }\n\n  updatePwd() {\n    const data = JSON.stringify({\n      uid: this.state.uid,\n      token: this.state.token\n    });\n    axios.post('/pwd-reset-update', data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {//console.log(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"loginContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"newPwdTitle\",\n        children: \"Password Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"pwd\",\n        placeholder: \"New Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"pwd-repeat\",\n        placeholder: \"Repeat New password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        name: \"reset-password-submit\",\n        onClick: () => this.updatePwd(),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default ResetPassword;","map":{"version":3,"sources":["/Users/ryan/Documents/cookwell-react-express/client/src/pages/reset-password.jsx"],"names":["React","Component","Link","axios","ResetPassword","constructor","props","state","uid","token","msg","updatePwd","bind","handleMsg","getParameterByName","componentDidMount","setState","name","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","length","data","JSON","stringify","post","headers","then","res","catch","err","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport './reset-password.sass';\nimport axios from 'axios';\n\n// load url params\n\n// send params to route api\n\n// confirm valid on client\n\n// \n\n\nclass ResetPassword extends React.Component {\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tuid: '',\n\t\t\ttoken: '',\n\t\t\tmsg: ''\n\t\t}\n\t\tthis.updatePwd = this.updatePwd.bind(this);\n\t\tthis.handleMsg = this.handleMsg.bind(this);\n\t\tthis.getParameterByName = this.getParameterByName.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tlet uid = this.getParameterByName('uid');\n\t\tlet token = this.getParameterByName('token');\n\t\tif (uid && token) this.setState({uid: uid, token: token});\n\t}\n\n\tgetParameterByName(name, url = window.location.href) {\n\t    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n\t    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n\t        results = regex.exec(url);\n\t    if (!results) return null;\n\t    if (!results[2]) return '';\n\t    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n\t}\n\n\n\thandleMsg(msg) {\n\t\tif (msg.length > 0) {\n\t\t\treturn <div className='logMsg'>{msg}</div>;\n\t\t}\n\t}\n\n\tupdatePwd() {\n\t\tconst data = JSON.stringify({\n\t\t\tuid: this.state.uid, \n\t\t\ttoken: this.state.token\n\t\t});\n\n\t\taxios.post('/pwd-reset-update', data, { headers: {'Content-Type': 'application/json'} })\n\t\t\t.then(res => {\n\t\t\t\t//console.log(res.data);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div class=\"loginContainer\">\n\t\t\t\t<div id=\"newPwdTitle\">Password Reset</div>\n\t\t\t\t<input type=\"password\" name=\"pwd\" placeholder=\"New Password\"/>\n\t\t\t\t<input type=\"password\" name=\"pwd-repeat\" placeholder=\"Repeat New password\"/>\n\t\t\t\t<button type=\"submit\" name=\"reset-password-submit\" onClick={() => this.updatePwd()}>Submit</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}